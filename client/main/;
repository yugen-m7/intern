#include "protocol_examples_common.h"
#include <esp_event.h>
#include <esp_http_client.h>
#include <esp_netif.h>
#include <esp_wifi.h>
#include <nvs_flash.h>
#include <stdio.h>
#include <esp_log.h>

typedef struct {
  uint8_t *buffer;
  int buffer_index;
}chunk_payload_t;
chunk_payload_t* chunk = {0};

extern const uint8_t pem[] asm("_binary_randomuser_pem_start");
esp_err_t client_event(esp_http_client_event_t *evt) {
  switch (evt->event_id) {
  case HTTP_EVENT_ON_DATA:
    ESP_LOGI("DATA_SIZE", "%d", evt->data_len)
    /* chunk->buffer=malloc(sizeof(evt->data_len)); */
    /* chunk = evt->user_data; */

    /* chunk->buffer=realloc(chunk->buffer, chunk->buffer_index + evt->data_len + 1); */
    /* memcpy(&chunk->buffer[chunk->buffer_index], (uint8_t*) evt->data, evt->data_len); */
    /* chunk->buffer_index += evt->data_len ; */
    /* chunk->buffer[chunk->buffer_index]=0; */

    /* printf("%.*s\n", evt->data_len, chunk->buffer); */

    break;
  default:
    break;
  }
 return ESP_OK;
}

void app_main(void) {

  nvs_flash_init();
  esp_netif_init(); esp_event_loop_create_default();
  example_connect();
  esp_http_client_config_t client_config = {
      .url = "https://api.zippopotam.us/us/33162",
      .method = HTTP_METHOD_GET,
      .event_handler = client_event,
      .cert_pem = (char *)pem
};
  esp_http_client_handle_t client_handle = esp_http_client_init(&client_config);
  esp_http_client_set_header(client_handle, "Content_type", "application/json");
  esp_http_client_perform(client_handle);
  esp_http_client_cleanup(client_handle);
  example_disconnect();
}
